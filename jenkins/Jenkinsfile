pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "dcerdassan/devopssnapfinance"
        BUILD_TAG = "${env.BUILD_NUMBER}"
    }

    stages {

        stage('Checkout Application') {
            steps {
                echo "Cloning main branch for application..."
                dir('application') {
                    deleteDir()
                    sh '''
                        git clone --branch main --depth 1 https://github.com/Alephdjcs/devops-challenge.git temp
                        mv temp/application/* .
                        rm -rf temp
                    '''
                }
            }
        }

        stage('Checkout Jenkins Scripts') {
            steps {
                echo "Cloning UAT branch for Jenkins scripts..."
                dir('jenkins') {
                    deleteDir()
                    git branch: 'UAT',
                        url: 'https://github.com/Alephdjcs/devops-challenge.git',
                        credentialsId: 'github-token'
                }
            }
        }

        stage('Pre-Build Script') {
            steps {
                echo "Checking application structure before running pre-build..."
                script {
                    if (!fileExists('application/src/web')) {
                        error "Required directory 'application/src/web' not found."
                    }
                    echo "Running pre-build script..."
                    sh 'bash ${WORKSPACE}/jenkins/jenkins/scripts/pre_build.sh'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker images..."
                    docker.build("${DOCKER_IMAGE}:${BUILD_TAG}", "./application")
                    docker.build("${DOCKER_IMAGE}:latest", "./application")
                    echo "Docker images built: ${DOCKER_IMAGE}:${BUILD_TAG} and ${DOCKER_IMAGE}:latest"
                }
            }
        }

        stage('Docker Login & Push') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'dockerhub-creds',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        echo "Logging in to Docker Hub..."
                        sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'

                        echo "Pushing Docker images to Docker Hub..."
                        sh "docker push ${DOCKER_IMAGE}:${BUILD_TAG}"
                        sh "docker push ${DOCKER_IMAGE}:latest"
                        echo "Images successfully pushed: ${DOCKER_IMAGE}:${BUILD_TAG}, ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }

        stage('Cleanup Old Docker Images') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'dockerhub-creds',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        echo "Running cleanup script for old Docker images..."
                        sh 'bash ${WORKSPACE}/jenkins/jenkins/scripts/cleanup_old_images.sh'
                    }
                }
            }
        }

        stage('Post-Build Script') {
            steps {
                echo "Running post-build script..."
                sh 'bash ${WORKSPACE}/jenkins/jenkins/scripts/post_build.sh'
            }
        }

        stage('Debug') {
            steps {
                echo "Checking file structure in workspace..."
                sh 'ls -R ${WORKSPACE}'
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed. Check the logs."
        }
    }
}
